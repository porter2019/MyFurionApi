<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyFurionApi.Core</name>
    </assembly>
    <members>
        <member name="T:MyFurionApi.Core.ForeignKeyTagAttribute">
            <summary>
            表示字段为主表的外键
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.FsColumnAttribute">
            <summary>
            SqlSugar列属性
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.FsColumnAttribute.#ctor(System.String)">
            <summary>
            基本，只设置列说明，其他默认
            </summary>
            <param name="displayName">显示名</param>
        </member>
        <member name="M:MyFurionApi.Core.FsColumnAttribute.#ctor(System.Boolean)">
            <summary>
            基本，设置忽略
            </summary>
            <param name="isIgnore"></param>
        </member>
        <member name="M:MyFurionApi.Core.FsColumnAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            通用，只设置列说明和是否可以为空
            </summary>
            <param name="displayName">列说明</param>
            <param name="isNullable">是否可以为空</param>
        </member>
        <member name="M:MyFurionApi.Core.FsColumnAttribute.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            适用于String
            </summary>
            <param name="displayName">列说明</param>
            <param name="isNullable">是否可以为空</param>
            <param name="length">长度，默认255</param>
        </member>
        <member name="F:MyFurionApi.Core.FsColumnAttribute._IsPK">
            <summary>
            必须这样写，不然内存溢出
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.FsColumnAttribute.IsPK">
            <summary>
            是否主键(为True时同时自增)
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.FsTableAttribute">
            <summary>
            SqlSugar表属性
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.FsTableAttribute.#ctor">
            <summary>
            默认
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.FsTableAttribute.#ctor(System.String)">
            <summary>
            指定表名
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:MyFurionApi.Core.FsTableAttribute.#ctor(System.Boolean)">
            <summary>
            忽略迁移
            </summary>
            <param name="isIgnore">是否忽略迁移</param>
        </member>
        <member name="M:MyFurionApi.Core.FsTableAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            指定表名和是否忽略，一般视图类使用
            </summary>
            <param name="tableName">表名</param>
            <param name="isIgnore">是否忽略迁移</param>
        </member>
        <member name="F:MyFurionApi.Core.FsTableAttribute._IsIgnore">
            <summary>
            必须这样写，不然内存溢出
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.FsTableAttribute.IsIgnore">
            <summary>
            是否主键(为True时同时自增)
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.PageQueryAttribute">
            <summary>
            分页属性设置
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.PageQueryAttribute.#ctor(MyFurionApi.Core.PageQueryOperatorType,SqlSugar.DbType)">
            <summary>
            只指定匹配类型
            </summary>
            <param name="action"></param>
            <param name="dbType">数据库类型，默认MySql</param>
        </member>
        <member name="P:MyFurionApi.Core.PageQueryAttribute.IsIgnore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageQueryAttribute.PrefixName">
            <summary>
            列前缀，a.
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageQueryAttribute.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageQueryAttribute.ColumnName">
            <summary>
            对应数据库的字段名称，如果为空，则跟列名一样
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageQueryAttribute.Logic">
            <summary>
            逻辑 And/Or，默认And
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageQueryAttribute.Operator">
            <summary>
            匹配类型
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.PageQueryOperatorType">
            <summary>
            where条件字段匹配类型
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.GreaterThanOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.LessThanOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.BoolWhenTrue">
            <summary>
            bool类型使用，为True时给条件“=1”
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.IntEqualWhenGreaterZero">
            <summary>
            Int类型使用，当>0时给条件
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.IntEqualWhenGreaterMinus">
            <summary>
            Int类型使用，当>-1时给条件
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.Like">
            <summary>
            like '%参数%'
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.LikeLeft">
            <summary>
            like '参数%'
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.LikeRight">
            <summary>
            like '%参数'
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.CharIndex">
            <summary>
            CHARINDEX('参数',UserName) > 0，MySQL下使用locate替代
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.BetweenNumber">
            <summary>
            值必须使用;分割,between and
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.BetweenDate">
            <summary>
            时间Between;分割,between and
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.IntIn">
            <summary>
            Int类型的in查询，值必须英文逗号分隔
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.IntNotIn">
            <summary>
            Int类型的not in查询，值必须英文逗号分割
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryOperatorType.Sql">
            <summary>
            指定SQL语句查询: 1=1
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.PageQueryLogicType">
            <summary>
            逻辑方式
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.PageQueryLogicType.And">
            <summary>
            and
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.PermissionAttribute">
            <summary>
            权限操作标识
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.PermissionAttribute.#ctor">
            <summary>
            权限标识
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.PermissionAttribute.#ctor(System.String,System.String)">
            <summary>
            指定操作名和别名
            </summary>
            <param name="operationName"></param>
            <param name="aliasName"></param>
        </member>
        <member name="M:MyFurionApi.Core.PermissionAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            指定操作名和别名
            </summary>
            <param name="operationName"></param>
            <param name="aliasName"></param>
            <param name="autoCheck"></param>
        </member>
        <member name="P:MyFurionApi.Core.PermissionAttribute.OperationName">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PermissionAttribute.AliasName">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PermissionAttribute.AutoCheck">
            <summary>
            自动检查权限
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.PermissionHandlerAttribute">
            <summary>
            控制器权限功能模块设置
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.PermissionHandlerAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="moduleName">模块名称</param>
            <param name="handlerName">模块下的功能名称</param>
            <param name="aliasName">模块下的功能别名</param>
            <param name="orderNo">排序数字，降序排列，数字越大越靠前</param>
        </member>
        <member name="P:MyFurionApi.Core.PermissionHandlerAttribute.ModuleName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PermissionHandlerAttribute.HandlerName">
            <summary>
            功能名称
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PermissionHandlerAttribute.AliasName">
            <summary>
            功能别名
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PermissionHandlerAttribute.OrderNo">
            <summary>
            排序数字
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.ICacheMyService">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.DelByPatternAsync(System.String)">
            <summary>
            用于在 key 模板存在时删除
            </summary>
            <param name="pattern">key模板</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.Set(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.SetAsync(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ICacheMyService.GetAllKeys">
            <summary>
            获取所有缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.MemoryCache">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.RedisCache">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.CacheOptions">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CacheOptions.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CacheOptions.RedisConnectionString">
            <summary>
            Redis配置
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.AppSettingsConst">
            <summary>
            配置文件key常量
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.AppSettingsConst.DomainUrl">
            <summary>
            本站域名
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.AppSettingsConst.HanfireCallBackDomainUrl">
            <summary>
            Hanfire计划任务回调该系统请求的域名
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.ClaimConst">
            <summary>
            身份令牌常量
            <code>正常情况下常量应该是全大写的，但是全大写我看着费劲，就不采用了</code>
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.ClaimConst.UserId">
            <summary>
            用户Id常量
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.ClaimConst.Account">
            <summary>
            账号
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.ClaimConst.UserName">
            <summary>
            用户名/昵称
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.ClaimConst.IsSuperAdmin">
            <summary>
            是否超级管理员
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.DBColumnDataType">
            <summary>
            数据库列数据类型常量
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.DBColumnDataType.Money">
            <summary>
            金额
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.BaseEntity">
            <summary>
            数据库实体基类
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseEntity.Id">
            <summary>
            主键自增Id
            <c>[SugarColumn(ColumnDescription = "Id主键", IsIdentity = true, IsPrimaryKey = true)]</c>
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseEntity.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseEntity.UpdatedTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseEntity.IsDeleted">
            <summary>
            软删除
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.BaseEntityStandard">
            <summary>
            数据库实体通用基类
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseEntityStandard.CreatedUserId">
            <summary>
            创建者Id
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseEntityStandard.CreatedUserName">
            <summary>
            创建者名称
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseEntityStandard.UpdatedUserId">
            <summary>
            修改者Id
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseEntityStandard.UpdatedUserName">
            <summary>
            修改者名称
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.CommonAttach">
            <summary>
            附件表
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.AttachType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.RefId">
            <summary>
            关联的数据id
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.FileType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.FileExt">
            <summary>
            文件后缀名
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.FilePath">
            <summary>
            文件相对路径
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.FileWebPath">
            <summary>
            完整路径
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.name">
            <summary>
            前端上传组件回显需要
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.CommonAttach.url">
            <summary>
            前端上传组件回显需要
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.CommonAttachType">
            <summary>
            附件类型
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.HanfireJobModel">
            <summary>
            Hanfire添加计划任务所需实体
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.HanfireJobModel.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            BackgroudJob，指定多少分钟后执行
            </summary>
            <param name="jobName">任务名称</param>
            <param name="url">任务访问的url</param>
            <param name="method">请求方式，Get/Post</param>
            <param name="delayFromMinutes">指定多少分钟后执行</param>
        </member>
        <member name="M:MyFurionApi.Core.HanfireJobModel.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            BackgroudJob，指定运行时间
            </summary>
            <param name="jobName">任务名称</param>
            <param name="url">任务访问的url</param>
            <param name="method">请求方式，Get/Post</param>
            <param name="runAt">指定运行时间</param>
        </member>
        <member name="M:MyFurionApi.Core.HanfireJobModel.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            RecurringJob，指定Corn表达式
            </summary>
            <param name="jobName">任务名称</param>
            <param name="url">任务访问的url</param>
            <param name="method">请求方式，Get/Post</param>
            <param name="corn">Corn表达式</param>
        </member>
        <member name="P:MyFurionApi.Core.HanfireJobModel.JobName">
            <summary>
            任务名称，如果是一次性后台任务，则仅仅是标识使用，如果是Recurring任务，则删除时需要这个同样的JobName
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.HanfireJobModel.Url">
            <summary>
            访问的url
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.HanfireJobModel.Method">
            <summary>
            访问方式，Get/Post
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.HanfireJobModel.DelayFromMinutes">
            <summary>
            BackgroudJob，指定多少分钟后执行
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.HanfireJobModel.RunAt">
            <summary>
            BackgroudJob，指定运行时间
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.HanfireJobModel.Corn">
            <summary>
            RecurringJob，指定Corn表达式，支持 6位数的Cron表达式(支持到秒级)，F12查看常用示例
            <code>执行周期的问题：https://github.com/yuzd/Hangfire.HttpJob/issues/66 </code>
            <code>0 15 10 ? * *    每天上午10:15触发 </code>
            <code>0 0/5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发 </code>
            <code>0 0 10,14,16 * * ?   每天上午10点、下午2点、4点触发 </code>
            <code>0 0 12 ? * WED   每个星期三中午12点触发 </code>
            <code>0 15 10 ? * MON-FRI    周一至周五的上午10:15触发 </code>
            <code>0 25 10 15 * ?   每月15日上午10:25触发 </code>
            <code>0 15 10 L * ?    每月最后一日的上午10:15触发 </code>
            <code>更多参考：https://www.cnblogs.com/yanghj010/p/10875151.html</code>
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.UploadFileInfo">
            <summary>
            上传附件返回对象
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.UploadFileInfo.FilePath">
            <summary>
            文件相对路径
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.UploadFileInfo.FileWebPath">
            <summary>
            包含域名的访问地址
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.UploadFileInfo.FileName">
            <summary>
            文件名(上传时的文件名)
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.UploadFileInfo.FileSourceName">
            <summary>
            文件原始名称
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.UploadFileInfo.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.UploadFileInfo.FileType">
            <summary>
            文件类型
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.UploadFileInfo.FileExt">
            <summary>
            文件拓展名
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.CacheType.MemoryCache">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.CacheType.RedisCache">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.MyValidationTypes.AccountName">
            <summary>
            账户名称
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.MyValidationTypes.CellPhone">
            <summary>
            11位手机号码
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.MyValidationTypes.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.LogEventSubscriber">
            <summary>
            日志事件订阅
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.LogEventSubscriber.CreateOpLog(Furion.EventBus.EventHandlerExecutingContext)">
            <summary>
            订阅
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.BasePageQueryModel`1">
            <summary>
            所有分页控制器接口需要继承的基类
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BasePageQueryModel`1.PageInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.BaseSingleQueryModel">
            <summary>
            查询单条实体所需
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseSingleQueryModel.OrderBy">
            <summary>
            排序，默默人Id ASC
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.BaseListQueryModel">
            <summary>
            List查询需要继承的基类
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseListQueryModel.Top">
            <summary>
            前几条，如果为0，则条件不生效
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseListQueryModel.OrderBy">
            <summary>
            排序，默默人Id ASC
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.BaseBuildWhereModel">
            <summary>
            所有需要自动构建where条件的请求实体需要继承
            </summary> 
        </member>
        <member name="M:MyFurionApi.Core.BaseBuildWhereModel.BuildPageSearchWhere">
            <summary>
            创建分页查询的where条件
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.PageOptions`1">
            <summary>
            分页条件
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageOptions`1.PageIndex">
            <summary>
            当前页数
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageOptions`1.PageSize">
            <summary>
            每页数据量
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageOptions`1.Where">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.PageOptions`1.OrderBy">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.BaseFormPostModel">
            <summary>
            所有Post对象需要继承的基类
            <code>方便在filter中自动注入当前登录的用户信息，这些信息在业务层中可能会需要用到</code>
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseFormPostModel.CurrentUserId">
            <summary>
            当前操作的用户id
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseFormPostModel.CurrentUserName">
            <summary>
            当前操作的用户名
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseFormPostModel.Id">
            <summary>
            数据Id
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.BaseFormPostModel.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.ExtensionsHelper">
            <summary>
            拓展工具类
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ParseToString(System.Object)">
            <summary>
            将object转换为string，若转换失败，则返回""。不抛出异常。  
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.IsEmpty(System.Object)">
            <summary>
            检查 Object 是否为 NULL
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToInt(System.Object)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToLong(System.Object)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToInt(System.Object,System.Int32)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <param name="errorValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToLong(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToDouble(System.Object)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToDouble(System.Object,System.Double)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <param name="errorValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToString(System.Object)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToString(System.Object,System.String)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <param name="errorValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToDecimal(System.Object)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToDecimal(System.Object,System.Decimal)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <param name="errorValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToDecimalString(System.Object,System.Int32)">
            <summary>
            转化为小数
            </summary>
            <param name="thisValue">被转化值</param>
            <param name="digits">小数位数(默认两位)</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToDecimalString(System.Object,System.String,System.Int32)">
            <summary>
            转化为小数
            </summary>
            <param name="thisValue">被转化值</param>
            <param name="errorValue">转化失败，返回默认值</param>
            <param name="digits">小数位数(默认两位)</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToThousString(System.Object,System.Int32)">
            <summary>
            转化为小数(千分位格式)
            </summary>
            <param name="thisValue">被转化值</param>
            <param name="digits">小数位数(默认两位)</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToThousString(System.Object,System.String,System.Int32)">
            <summary>
            转化为小数(千分位格式)
            </summary>
            <param name="thisValue">被转化值</param>
            <param name="errorValue">转化失败，返回默认值</param>
            <param name="digits">小数位数(默认两位)</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToDate(System.Object)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToDate(System.Object,System.DateTime)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <param name="errorValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ObjToBool(System.Object)">
             <summary>
            
             </summary>
             <param name="thisValue"></param>
             <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.IsGenericSubclassOf(System.Type,System.Type)">
            <summary>
            判断泛型类型是否为继承关系
            </summary>
            <param name="type"></param>
            <param name="superType"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.RegexMatchValue(System.String,System.String)">
            <summary>
            正则表达式匹配截取字符串
            </summary>
            <param name="s"></param>
            <param name="regexExpression">正则表达式</param>
            <remarks>比如从"AAhelloBB"中取出"hello"，正则写为：AA(\\S*)BB</remarks>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.IsNull(System.String)">
            <summary>
            判断字符串是否为Null、空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.IsNotNull(System.String)">
            <summary>
            判断字符串是否不为Null、空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            与字符串进行比较，忽略大小写
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.FirstCharToLower(System.String)">
            <summary>
            首字母转小写
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.FirstCharToUpper(System.String)">
            <summary>
            首字母转大写
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.RemoveElement(System.String,System.String,System.String)">
            <summary>
            字符串删除一个元素，一般用;或,分隔
            </summary>
            <param name="str"></param>
            <param name="element"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.AddElement(System.String,System.String,System.String)">
            <summary>
            字符串添加一个元素，一般用;或,分隔
            </summary>
            <param name="str"></param>
            <param name="element"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.FilterSql(System.String)">
            <summary>
            过滤不安全SQL关键字，包括（'|and|exec|insert|select|delete|update|chr|mid|master|or|truncate|char|declare|join）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.FilterSql2(System.String)">
            <summary>
            过滤不安全SQL关键字，仅（exec|insert|delete|update|master|truncate)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.SubStringByte(System.String,System.Int32,System.Int32)">
            <summary>
            按字节数截取字符串
            </summary>
            <param name="str"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.SubStringWithLength(System.String,System.Int32)">
            <summary>
            截取指定长度的字符串，超出使用省略号代替
            </summary>
            <param name="str"></param>
            <param name="length">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ByteLength(System.String)">
            <summary>
            返回字符串字节数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.SplitString(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="sourceStr">源字符串</param>
            <param name="splitStr">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.SplitWithSemicolon(System.String)">
            <summary>
             使用“;”号分割字符串
            </summary>
            <param name="sourceStr">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.SplitWithComma(System.String)">
            <summary>
             使用“,”号分割字符串
            </summary>
            <param name="sourceStr">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ToDateTime(System.String,System.DateTime)">
            <summary>
            将没有分隔符的时间字符串格式化为时间
            </summary>
            <param name="sourceStr">20210125193055/20210125/193055</param>
            <param name="errorValue">转换失败返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ToRoundUp(System.Decimal,System.Int32)">
            <summary>
            将数值向上取整
            </summary>
            <param name="toRound">原数值</param>
            <param name="multiple">倍数(基数10)</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ToRoundDown(System.Decimal,System.Int32)">
            <summary>
            将数值向下取整
            </summary>
            <param name="toRound">原数值</param>
            <param name="multiple">倍数(基数10)</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.FormatMoney(System.Decimal)">
            <summary>
            格式化金额千分位，保留两位小数
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ConvertToDateTime(System.Int32)">
            <summary>
            时间戳转换为日期（时间戳单位秒）
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ConvertToDateTime(System.Int64)">
            <summary>
            时间戳转换为日期（时间戳单位毫秒）
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.Format(System.TimeSpan)">
            <summary>
            将格式化为：d天HH小时mm分钟
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ToDateTime(System.TimeSpan)">
            <summary>
            TimeSpan 转DateTime
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ToShortDate(System.DateTime)">
            <summary>
            日期转换为短日期格式(yyyy-MM-dd)
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.WeekBegin(System.DateTime)">
            <summary>
            返回该日期所在周的第一天（周一）
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.WeekEnd(System.DateTime)">
            <summary>
            返回该日期所在周的最后一天（周日）
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.WeekOfYear(System.DateTime)">
            <summary>
            返回该日期的周数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.QuarterOfYear(System.DateTime)">
            <summary>
            返回该日期的季度(1~4)
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.QuarterBegin(System.DateTime)">
            <summary>
            返回该日期所在季度的第一天
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.QuarterEnd(System.DateTime)">
            <summary>
            返回该日期所在季度的最后一天
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ToTimeStampMilliSecond(System.DateTime)">
            <summary>
            转时间戳(毫秒)
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ToTimeStamp(System.DateTime)">
            <summary>
            转时间戳(精度:秒)
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ToCron(System.DateTime)">
            <summary>
            转为Cron表达式
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.RemoveFristChar(System.Text.StringBuilder)">
            <summary>
            StringBuilder删除第一位字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.RemoveLastChar(System.Text.StringBuilder)">
            <summary>
            StringBuilder删除最后一位字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.ConvertIntArray(System.String[])">
            <summary>
            将 string[] 转换为 int[]
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyFurionApi.Core.ExtensionsHelper.ConvertIntList(System.String[])" -->
        <member name="M:MyFurionApi.Core.ExtensionsHelper.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断IEnumerable是否是空的
            <code>为null或者有没有值</code>
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.Join(System.Collections.Generic.IEnumerable{System.Int32},System.Char)">
            <summary>
            仿照JavaScript的join方法
            </summary>
            <param name="list"></param>
            <param name="separator">分隔符，默认','</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.Join(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            仿照JavaScript的join方法
            </summary>
            <param name="list"></param>
            <param name="separator">分隔符，默认','</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.StripHtml(System.String)">
            <summary>
            去掉HTML标记
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetHtmlText(System.String)">
            <summary>
            获取html中纯文本
            </summary>
            <param name="html">html</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.Transferred(System.String)">
            <summary>
            普通字符变换成转义字符
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.UnTransferred(System.String)">
            <summary>
            转义字符变换成普通字符
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.EncryptBase64Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="toEncrypt"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.EncryptBase64Encode(System.String)">
            <summary>
            Base64加密，采用utf8编码方式加密
            </summary>
            <param name="toEncrypt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.EncryptBase64Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="toDecrypt"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.EncryptBase64Decode(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="toDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetEnumDescription(System.Enum)">
            <summary>
            从枚举中获取Description
            </summary>
            <param name="enumName">需要获取枚举描述的枚举</param>
            <returns>描述</returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetEnumDescription(System.Type,System.Int32)">
            <summary>
            根据 value 值获取Description
            </summary>
            <param name="enumType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetEnumNamesList(System.Type)">
            <summary>
            获取枚举所有名称
            </summary>
            <param name="enumType">枚举类型typeof(T)</param>
            <returns>枚举名称列表</returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetEnumValuesList(System.Type)">
            <summary>
            获取所有枚举对应的值
            </summary>
            <param name="enumType">枚举类型typeof(T)</param>
            <returns>枚举值列表</returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetNameAndDescriptions(System.Type)">
            <summary>
            获取枚举名以及对应的Description
            </summary>
            <param name="type">枚举类型typeof(T)</param>
            <returns>返回Dictionary  ,Key为枚举名，  Value为枚举对应的Description</returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetEnumNameAndValue(System.Type)">
            <summary>
            获取枚举名以及对应的Value
            </summary>
            <param name="type">枚举类型typeof(T)</param>
            <returns>返回Dictionary  ,Key为描述名，  Value为枚举对应的值</returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetEnumOptions(System.Type)">
            <summary>
            获取枚举名以及对应的Value
            </summary>
            <param name="type">枚举类型typeof(T)</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ExtensionsHelper.GetValue(Microsoft.AspNetCore.Http.IHeaderDictionary,System.String)">
            <summary>
            获取Request中的Header指定key的值
            </summary>
            <param name="heads"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.MyActionFilter">
            <summary>
            方法过滤器
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.MyExceptionFilter">
            <summary>
            异常过滤器
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.JsonHelper">
            <summary>
            Json序列号
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.JsonHelper.Serialize(System.Object)">
            <summary>
            序列化对象为json字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.JsonHelper.Deserialize``1(System.String)">
            <summary>
            序列化json字符串为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.RandomHelper">
            <summary>
            随机数工具类
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.RandomHelper.constantInt">
            <summary>
            整形随机数
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.RandomHelper.GenerateNumber(System.Int32)">
            <summary>
            生成随机数,数字+小写字母+大写字母随机组合
            </summary>
            <param name="Length">长度</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.RandomHelper.GenerateIntNumber(System.Int32)">
            <summary>
            生成整形随机数
            </summary>
            <param name="Length">长度</param>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.SystemTextJsonConfig">
            <summary>
            SystemTextJson序列化配置
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.SystemTextJsonConfig.DateTimeConverter">
            <summary>
            时间格式化
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.SystemTextJsonConfig.DateTimeNullableConverter">
            <summary>
            可空时间类型格式化
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.SystemTextJsonConfig.IntToStringConverter">
            <summary>
            解决数值字符串不能隐式转换为数值类型的问题(隐式转换会出现精度缺失, 但依旧会转换成功最终导致数据计算或者数据落库等安全隐患, 是个潜在的问题)
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.SystemTextJsonConfig.DoubleToStringConverter">
            <summary>
            双精度转换
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.SystemTextJsonConfig.DecimalToStringConverter">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.SystemTextJsonConfig.BoolJsonConverter">
            <summary>
            布尔类型处理
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.SystemTextJsonConfig.StringJsonConverter">
            <summary>
            将string类型的Null值转成""
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.AttachUploadService">
            <summary>
            附件上传服务
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.AttachUploadService.SaveAttach(Microsoft.AspNetCore.Http.IFormFileCollection,System.String)">
            <summary>
            保存附件
            </summary>
            <param name="files">上传文件列表</param>
            <param name="folder">保存的文件夹</param>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.HangfireJobService">
            <summary>
            Hanfire计划任务服务
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.AddBackgroudJobRunAtAsync(MyFurionApi.Core.HanfireJobModel)">
            <summary>
            添加一个一次性任务，指定执行时间
            </summary>
            <param name="model">任务名称</param>
            <returns>返回jobId，删除时需要</returns>
            <example>await _hangfireJobService.AddBackgroudJobRunAtAsync(new HanfireJobModel(jobName: "inquiry_expire_" + inquiryEntity.Id,url: $"{_config[AppSettingsConst.HanfireCallBackDomainUrl]}/api/inquiryContent/taskjob/expire?id={inquiryEntity.Id}",method: "Get",runAt: inquiryEntity.ExpireTime))</example>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.RemoveBackgroundJobAsync(System.String)">
            <summary>
            删除一个一次性任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.AddBackgroundJob(Hangfire.HttpJob.Client.BackgroundJob)">
            <summary>
            添加一个一次性任务
            </summary>
            <param name="job"></param>
            <returns>如果返回为空，则执行成功，否则返回异常消息</returns>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.AddBackgroundJobAsync(Hangfire.HttpJob.Client.BackgroundJob)">
            <summary>
            添加一个一次性任务
            </summary>
            <param name="job"></param>
            <returns>如果返回为空，则执行成功，否则返回异常消息</returns>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.DeleteBackgroundJob(System.String)">
            <summary>
            根据jobid删除一个一次性任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.DeleteBackgroundJobAsync(System.String)">
            <summary>
            根据jobid删除一个一次性任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.AddRecurringJob(Hangfire.HttpJob.Client.RecurringJob)">
            <summary>
             添加一个指定Corn的任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.AddRecurringJobAsync(Hangfire.HttpJob.Client.RecurringJob)">
            <summary>
             添加一个指定Corn的任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.DeleteRecurringJob(System.String)">
            <summary>
            根据jobName删除周期任务
            </summary>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.HangfireJobService.DeleteRecurringJobAsync(System.String)">
            <summary>
            根据jobName删除周期任务
            </summary>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.ImgCaptchaService">
            <summary>
            图形验证码服务
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.ImgCaptchaService.GenerateAsync(System.String)">
            <summary>
            根据操作标识生成图形验证码
            </summary>
            <remarks>同时保存到缓存中</remarks>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ImgCaptchaService.ValidateCodeAsync(System.String,System.String)">
            <summary>
            校验图形验证码
            </summary>
            <param name="guid"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.ImgCaptchaService.GenerateImg(System.String,System.Int32,System.Int32)">
            <summary>
            生成验证码图片
            </summary>
            <param name="code">验证码</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.IAttachUploadService.SaveAttach(Microsoft.AspNetCore.Http.IFormFileCollection,System.String)">
            <summary>
            保存附件
            </summary>
            <param name="files">上传文件列表</param>
            <param name="folder">保存的文件夹</param>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.IHangfireJobService">
            <summary>
            Hanfire计划任务服务
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.IImgCaptchaService">
            <summary>
            图形验证码
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.IImgCaptchaService.GenerateImg(System.String,System.Int32,System.Int32)">
            <summary>
            生成验证码图片
            </summary>
            <param name="code">验证码</param>
            <param name="width">宽为0将根据验证码长度自动匹配合适宽度</param>
            <param name="height">高</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.IImgCaptchaService.GenerateAsync(System.String)">
            <summary>
            根据操作标识生成图形验证码
            </summary>
            <remarks>同时保存到缓存中</remarks>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.IImgCaptchaService.ValidateCodeAsync(System.String,System.String)">
            <summary>
            校验图形验证码
            </summary>
            <param name="guid"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarPagedList`1.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarPagedList`1.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarPagedList`1.TotalCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarPagedList`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarPagedList`1.Items">
            <summary>
            当前页集合
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarPagedList`1.HasPrevPages">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarPagedList`1.HasNextPages">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="T:MyFurionApi.Core.SqlSugarRepository`1">
            <summary>
            仓储
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.SqlSugarRepository`1._db">
            <summary>
            初始化 SqlSugar 客户端
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarRepository`1.Context">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarRepository`1.EntityContext">
            <summary>
            独立数据库上下文
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.#ctor(SqlSugar.ISqlSugarClient)">
            <summary>
            构造函数
            </summary>
            <param name="db"></param>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarRepository`1.Entities">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="P:MyFurionApi.Core.SqlSugarRepository`1.Ado">
            <summary>
            原生 Ado 对象
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Count(System.String,System.Object)">
            <summary>
            获取总数
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.CountAsync(System.String,System.Object)">
            <summary>
            获取总数
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <param name="condition"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <param name="condition"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Single(System.Object)">
            <summary>
            通过主键获取实体
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.FirstOrDefault(MyFurionApi.Core.BaseSingleQueryModel)">
            <summary>
            获取一个实体
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.FirstOrDefaultAsync(MyFurionApi.Core.BaseSingleQueryModel)">
            <summary>
            获取一个实体
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToList">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToList(System.String)">
            <summary>
            使用原始查询
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToListAsync">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToListAsync(System.String)">
            <summary>
            使用原始查询
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToList(MyFurionApi.Core.BaseListQueryModel)">
            <summary>
            获取列表
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToListAsync(MyFurionApi.Core.BaseListQueryModel)">
            <summary>
            获取列表
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToPageList(MyFurionApi.Core.BasePageQueryModel{`0})">
            <summary>
            分页
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.ToPageListAsync(MyFurionApi.Core.BasePageQueryModel{`0})">
            <summary>
            分页
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Insert(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertReturnIdentity(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertReturnSnowflakeId(`0)">
            <summary>
            新增一条记录返回雪花Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertReturnEntity(`0)">
            <summary>
            新增一条记录返回实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertReturnSnowflakeIdAsync(`0)">
            <summary>
            新增一条记录返回雪花Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.InsertReturnEntityAsync(`0)">
            <summary>
            新增一条记录返回实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateItemDiff(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新明细
            </summary>
            <param name="masterId"></param>
            <param name="list"></param>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateItemDiffAsync(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新明细
            </summary>
            <param name="masterId"></param>
            <param name="list"></param>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateItemDiffClear(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新明细，清空重新添加
            </summary>
            <param name="masterId"></param>
            <param name="list"></param>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateItemDiffClearAsync(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新明细，清空重新添加
            </summary>
            <param name="masterId"></param>
            <param name="list"></param>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateAttachFiles(System.Int32,MyFurionApi.Core.CommonAttachType,System.Collections.Generic.IEnumerable{MyFurionApi.Core.CommonAttach})">
            <summary>
            添加附件，清空重新添加
            </summary>
            <param name="refId"></param>
            <param name="attachType">附件类型</param>
            <param name="list"></param>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateAttachFilesAsync(System.Int32,MyFurionApi.Core.CommonAttachType,System.Collections.Generic.IEnumerable{MyFurionApi.Core.CommonAttach})">
            <summary>
            添加附件，清空重新添加
            </summary>
            <param name="refId"></param>
            <param name="attachType">附件类型</param>
            <param name="list"></param>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Update(`0,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <param name="ignoreColumns"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateAsync(`0,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <param name="ignoreColumns"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            更新记录
            </summary>
            <param name="predicate">更新的条件</param>
            <param name="content">更新的内容</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            更新记录
            </summary>
            <param name="predicate">更新的条件</param>
            <param name="content">更新的内容</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Delete(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Delete(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Delete(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="whereSql"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteAsync(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteAsync(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteAsync(System.String)">
            <summary>
            删除
            </summary>
            <param name="whereSql"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteWithSoft(System.Int32)">
            <summary>
            软删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteWithSoft(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            软删除
            </summary>
            <param name="idList"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteWithSoft(System.Collections.Generic.IEnumerable{System.Int32},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            软删除
            </summary>
            <param name="idList"></param>
            <param name="where">额外条件</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteWithSoft(System.String)">
            <summary>
            软删除
            </summary>
            <param name="whereSql"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteWithSoftAsync(System.Int32)">
            <summary>
            软删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteWithSoftAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            软删除
            </summary>
            <param name="idList"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteWithSoftAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            软删除
            </summary>
            <param name="idList"></param>
            <param name="where">额外条件</param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.DeleteWithSoftAsync(System.String)">
            <summary>
            软删除
            </summary>
            <param name="whereSql"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="condition"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Where(System.String)">
            <summary>
            使用Sql语句进行查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Where(System.Boolean,System.String)">
            <summary>
            使用Sql语句进行查询
            </summary>
            <param name="condition"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.AsQueryable">
            <summary>
            构建查询分析器
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.AsEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.AsAsyncEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.Change``1">
            <summary>
            切换仓储(注意使用环境)
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.CurrentBeginTran">
            <summary>
            当前db
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.CurrentCommitTran">
            <summary>
            当前db
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.CurrentRollbackTran">
            <summary>
            当前db
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.BeginTran">
            <summary>
            所有db
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.CommitTran">
            <summary>
            所有db
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarRepository`1.RollbackTran">
            <summary>
            所有db
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlsugarSetup.GetUserId">
            <summary>
            获取当前用户id
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyFurionApi.Core.SqlsugarSetup.GetUserName">
            <summary>
            获取当前用户名
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyFurionApi.Core.SqlSugarUnitOfWork">
            <summary>
            SqlSugar 工作单元实现
            </summary>
        </member>
        <member name="F:MyFurionApi.Core.SqlSugarUnitOfWork._sqlSugarClient">
            <summary>
            SqlSugar 对象
            </summary>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarUnitOfWork.#ctor(SqlSugar.ISqlSugarClient)">
            <summary>
            构造函数
            </summary>
            <param name="sqlSugarClient"></param>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarUnitOfWork.BeginTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            开启工作单元处理
            </summary>
            <param name="context"></param>
            <param name="unitOfWork"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarUnitOfWork.CommitTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            提交工作单元处理
            </summary>
            <param name="resultContext"></param>
            <param name="unitOfWork"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarUnitOfWork.RollbackTransaction(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Furion.DatabaseAccessor.UnitOfWorkAttribute)">
            <summary>
            回滚工作单元处理
            </summary>
            <param name="resultContext"></param>
            <param name="unitOfWork"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyFurionApi.Core.SqlSugarUnitOfWork.OnCompleted(Microsoft.AspNetCore.Mvc.Filters.FilterContext,Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            执行完毕（无论成功失败）
            </summary>
            <param name="context"></param>
            <param name="resultContext"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
    </members>
</doc>
